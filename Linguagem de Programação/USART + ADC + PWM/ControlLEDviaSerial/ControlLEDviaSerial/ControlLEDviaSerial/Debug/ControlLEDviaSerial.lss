
ControlLEDviaSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000d84  00000e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080015c  0080015c  00000e74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001278  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a48  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c6  00000000  00000000  00003ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 36       	cpi	r26, 0x60	; 96
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 18 01 	call	0x230	; 0x230 <main>
  9e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciaLEDS>:

void iniciaLEDS()
{
		
		
	valorPWM = eeprom_read_byte((const uint8_t *)3);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
  b4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD03Init();
  b8:	0e 94 33 03 	call	0x666	; 0x666 <PwmD03Init>
	PwmD03SetDuty(valorPWM);
  bc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
  c0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
  c4:	0e 94 3f 03 	call	0x67e	; 0x67e <PwmD03SetDuty>
	
	valorPWM = eeprom_read_byte((const uint8_t *)5);
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
  d6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD05Init();
  da:	0e 94 e6 02 	call	0x5cc	; 0x5cc <PwmD05Init>
	PwmD05SetDuty(valorPWM);
  de:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
  e2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
  e6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <PwmD05SetDuty>
	
	valorPWM = eeprom_read_byte((const uint8_t *)6);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
  f8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD06Init();
  fc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <PwmD06Init>
	PwmD06SetDuty(valorPWM);
 100:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 104:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 108:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <PwmD06SetDuty>
	
	valorPWM = eeprom_read_byte((const uint8_t *)9);
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 11a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD09Init();
 11e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <PwmD09Init>
	PwmD09SetDuty(valorPWM);
 122:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 126:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 12a:	0e 94 07 03 	call	0x60e	; 0x60e <PwmD09SetDuty>
	
	valorPWM = eeprom_read_byte((const uint8_t *)10);
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 13c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD10Init();
 140:	0e 94 17 03 	call	0x62e	; 0x62e <PwmD10Init>
	PwmD10SetDuty(valorPWM);
 144:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 148:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 14c:	0e 94 23 03 	call	0x646	; 0x646 <PwmD10SetDuty>
	
	valorPWM = eeprom_read_byte((const uint8_t *)11);
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 73 06 	call	0xce6	; 0xce6 <eeprom_read_byte>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 15e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	PwmD11Init();
 162:	0e 94 4d 03 	call	0x69a	; 0x69a <PwmD11Init>
	PwmD11SetDuty(valorPWM);
 166:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 16a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 16e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <PwmD11SetDuty>
 172:	08 95       	ret

00000174 <__vector_18>:
}



ISR(USART_RX_vect) //#Interrupt.h
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	
	recebido = USART_Receive();
 196:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <USART_Receive>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	if(recebido == '[' && contabuffer == 0)
 19e:	8b 35       	cpi	r24, 0x5B	; 91
 1a0:	79 f4       	brne	.+30     	; 0x1c0 <__vector_18+0x4c>
 1a2:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <contabuffer>
 1a6:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <contabuffer+0x1>
 1aa:	23 2b       	or	r18, r19
 1ac:	49 f4       	brne	.+18     	; 0x1c0 <__vector_18+0x4c>
	{
		buffer[0] = '[';
 1ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		contabuffer++;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <contabuffer+0x1>
 1ba:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <contabuffer>
 1be:	27 c0       	rjmp	.+78     	; 0x20e <__vector_18+0x9a>
	}
	
	else if(buffer[0] == '[' && contabuffer > 0 && recebido != '[')
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <buffer>
 1c4:	9b 35       	cpi	r25, 0x5B	; 91
 1c6:	19 f5       	brne	.+70     	; 0x20e <__vector_18+0x9a>
 1c8:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <contabuffer>
 1cc:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <contabuffer+0x1>
 1d0:	12 16       	cp	r1, r18
 1d2:	13 06       	cpc	r1, r19
 1d4:	e4 f4       	brge	.+56     	; 0x20e <__vector_18+0x9a>
 1d6:	8b 35       	cpi	r24, 0x5B	; 91
 1d8:	a1 f0       	breq	.+40     	; 0x202 <__vector_18+0x8e>
	{
		buffer[contabuffer] = recebido;
 1da:	f9 01       	movw	r30, r18
 1dc:	ef 5f       	subi	r30, 0xFF	; 255
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 83       	st	Z, r24
		contabuffer++;
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <contabuffer+0x1>
 1ea:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <contabuffer>
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <__vector_18+0x9a>
	}
	
	else if(buffer[0] == '[' && contabuffer > 0)
	{
		for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 1f0:	81 93       	st	Z+, r24
 1f2:	2e 17       	cp	r18, r30
 1f4:	3f 07       	cpc	r19, r31
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <__vector_18+0x7c>
		contabuffer=0;
 1f8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <contabuffer+0x1>
 1fc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <contabuffer>
	
	
	
	
		
}
 200:	06 c0       	rjmp	.+12     	; 0x20e <__vector_18+0x9a>
 202:	e1 e0       	ldi	r30, 0x01	; 1
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	2b e0       	ldi	r18, 0x0B	; 11
 208:	31 e0       	ldi	r19, 0x01	; 1
		contabuffer++;
	}
	
	else if(buffer[0] == '[' && contabuffer > 0)
	{
		for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	f1 cf       	rjmp	.-30     	; 0x1f0 <__vector_18+0x7c>
	
	
	
	
		
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <main>:

int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <main+0x6>
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
 23c:	0e 94 67 03 	call	0x6ce	; 0x6ce <USART_Init>
	USART_StrTx("HELLO");
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
	USART_Transmit('\r');
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
	USART_Transmit('\n');
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
	USART_rxIE();
 254:	0e 94 92 03 	call	0x724	; 0x724 <USART_rxIE>
	USART_StrTx("Aguadando Comando");
 258:	81 e1       	ldi	r24, 0x11	; 17
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
	USART_StrTx("\r\n\n");
 260:	87 e4       	ldi	r24, 0x47	; 71
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
	DDRD = 0xFF;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 26c:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	83 e2       	ldi	r24, 0x23	; 35
 272:	94 ef       	ldi	r25, 0xF4	; 244
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x44>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x4e>
 27e:	00 00       	nop
	_delay_ms(5000);
	
	iniciaLEDS();
 280:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciaLEDS>
    {
		sei();
		_delay_ms(1000);
		cli();
		
		if(buffer[0] == '[' && buffer[9] == ']')
 284:	0f 2e       	mov	r0, r31
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	af 2e       	mov	r10, r31
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	bf 2e       	mov	r11, r31
 28e:	f0 2d       	mov	r31, r0
 290:	0b e0       	ldi	r16, 0x0B	; 11
 292:	11 e0       	ldi	r17, 0x01	; 1
			USART_StrTx("Comando Invalido");
			USART_StrTx("\r\n");
			USART_StrTx("Aguadando Comando");
			USART_StrTx("\r\n\n");
			contabuffer = 0;
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }	
 294:	0f 2e       	mov	r0, r31
 296:	f0 e3       	ldi	r31, 0x30	; 48
 298:	3f 2e       	mov	r3, r31
 29a:	f0 2d       	mov	r31, r0
			USART_StrTx("\r\n");
			if(buffer[1] == 'P' && buffer[5] == '_')
			{
				valorPWM = (buffer[6] - 48) * 100;
				valorPWM += (buffer[7] - 48) * 10;
				valorPWM += buffer[8] - 48;
 29c:	0f 2e       	mov	r0, r31
 29e:	f4 e6       	ldi	r31, 0x64	; 100
 2a0:	2f 2e       	mov	r2, r31
 2a2:	f0 2d       	mov	r31, r0
				USART_Transmit(buffer[4]);
				USART_StrTx(" Com PWM de: ");
				
				
				char strvalorPWM[3];
				sprintf(strvalorPWM, "%d", valorPWM);
 2a4:	0f 2e       	mov	r0, r31
 2a6:	fb e3       	ldi	r31, 0x3B	; 59
 2a8:	6f 2e       	mov	r6, r31
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	7f 2e       	mov	r7, r31
 2ae:	f0 2d       	mov	r31, r0
 2b0:	fe 01       	movw	r30, r28
 2b2:	31 96       	adiw	r30, 0x01	; 1
 2b4:	4f 01       	movw	r8, r30
					eeprom_write_byte((uint8_t *)9, valorPWM);
				}
				else if(buffer[2] == 'D' && buffer[3] == '1' && buffer[4] == '0')
				{
					PwmD10SetDuty(valorPWM);
					eeprom_write_byte((uint8_t *)10, valorPWM);
 2b6:	0f 2e       	mov	r0, r31
 2b8:	fc e5       	ldi	r31, 0x5C	; 92
 2ba:	4f 2e       	mov	r4, r31
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	5f 2e       	mov	r5, r31
 2c0:	f0 2d       	mov	r31, r0
	
	iniciaLEDS();
	
    while (1) 
    {
		sei();
 2c2:	78 94       	sei
 2c4:	ff ef       	ldi	r31, 0xFF	; 255
 2c6:	23 ed       	ldi	r18, 0xD3	; 211
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	f1 50       	subi	r31, 0x01	; 1
 2cc:	20 40       	sbci	r18, 0x00	; 0
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x9a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0xa4>
 2d4:	00 00       	nop
		_delay_ms(1000);
		cli();
 2d6:	f8 94       	cli
		
		if(buffer[0] == '[' && buffer[9] == ']')
 2d8:	f5 01       	movw	r30, r10
 2da:	80 81       	ld	r24, Z
 2dc:	8b 35       	cpi	r24, 0x5B	; 91
 2de:	89 f7       	brne	.-30     	; 0x2c2 <main+0x92>
 2e0:	81 85       	ldd	r24, Z+9	; 0x09
 2e2:	8d 35       	cpi	r24, 0x5D	; 93
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <main+0xb8>
 2e6:	27 c1       	rjmp	.+590    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	ef 2e       	mov	r14, r31
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	ff 2e       	mov	r15, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	67 01       	movw	r12, r14
		{
			for(int i=0; i<=9 ;i++)
			{
				USART_Transmit(buffer[i]);
 2f6:	f6 01       	movw	r30, r12
 2f8:	81 91       	ld	r24, Z+
 2fa:	6f 01       	movw	r12, r30
 2fc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
		_delay_ms(1000);
		cli();
		
		if(buffer[0] == '[' && buffer[9] == ']')
		{
			for(int i=0; i<=9 ;i++)
 300:	0c 15       	cp	r16, r12
 302:	1d 05       	cpc	r17, r13
 304:	c1 f7       	brne	.-16     	; 0x2f6 <main+0xc6>
			{
				USART_Transmit(buffer[i]);
			}
			USART_StrTx("\r\n");
 306:	83 e2       	ldi	r24, 0x23	; 35
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			if(buffer[1] == 'P' && buffer[5] == '_')
 30e:	f5 01       	movw	r30, r10
 310:	81 81       	ldd	r24, Z+1	; 0x01
 312:	80 35       	cpi	r24, 0x50	; 80
 314:	09 f0       	breq	.+2      	; 0x318 <main+0xe8>
 316:	fc c0       	rjmp	.+504    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 318:	85 81       	ldd	r24, Z+5	; 0x05
 31a:	8f 35       	cpi	r24, 0x5F	; 95
 31c:	09 f0       	breq	.+2      	; 0x320 <main+0xf0>
 31e:	f8 c0       	rjmp	.+496    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			{
				valorPWM = (buffer[6] - 48) * 100;
				valorPWM += (buffer[7] - 48) * 10;
				valorPWM += buffer[8] - 48;
 320:	86 81       	ldd	r24, Z+6	; 0x06
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	c0 97       	sbiw	r24, 0x30	; 48
 326:	28 9e       	mul	r2, r24
 328:	90 01       	movw	r18, r0
 32a:	29 9e       	mul	r2, r25
 32c:	30 0d       	add	r19, r0
 32e:	11 24       	eor	r1, r1
 330:	87 81       	ldd	r24, Z+7	; 0x07
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	c0 97       	sbiw	r24, 0x30	; 48
 336:	ac 01       	movw	r20, r24
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	84 0f       	add	r24, r20
 34a:	95 1f       	adc	r25, r21
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	20 85       	ldd	r18, Z+8	; 0x08
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	20 53       	subi	r18, 0x30	; 48
 356:	31 09       	sbc	r19, r1
 358:	82 0f       	add	r24, r18
 35a:	93 1f       	adc	r25, r19
 35c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 360:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
				USART_StrTx("Pino: ");
 364:	86 e2       	ldi	r24, 0x26	; 38
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				USART_Transmit(buffer[2]);
 36c:	f5 01       	movw	r30, r10
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
				USART_Transmit(buffer[3]);
 374:	f5 01       	movw	r30, r10
 376:	83 81       	ldd	r24, Z+3	; 0x03
 378:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
				USART_Transmit(buffer[4]);
 37c:	f5 01       	movw	r30, r10
 37e:	84 81       	ldd	r24, Z+4	; 0x04
 380:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
				USART_StrTx(" Com PWM de: ");
 384:	8d e2       	ldi	r24, 0x2D	; 45
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				
				
				char strvalorPWM[3];
				sprintf(strvalorPWM, "%d", valorPWM);
 38c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <__data_end+0x1>
 390:	8f 93       	push	r24
 392:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 396:	8f 93       	push	r24
 398:	7f 92       	push	r7
 39a:	6f 92       	push	r6
 39c:	9f 92       	push	r9
 39e:	8f 92       	push	r8
 3a0:	0e 94 c0 03 	call	0x780	; 0x780 <sprintf>
				USART_StrTx(strvalorPWM );
 3a4:	c4 01       	movw	r24, r8
 3a6:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				
				USART_StrTx(" Em %: ");
 3aa:	8e e3       	ldi	r24, 0x3E	; 62
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				valorPWM = (valorPWM*100)/255;
 3b2:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <__data_end>
 3b6:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <__data_end+0x1>
 3ba:	22 9e       	mul	r2, r18
 3bc:	c0 01       	movw	r24, r0
 3be:	23 9e       	mul	r2, r19
 3c0:	90 0d       	add	r25, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	6f ef       	ldi	r22, 0xFF	; 255
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 3cc:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <__data_end>
 3d0:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <__data_end+0x1>
				sprintf(strvalorPWM, "%d", valorPWM);
 3d4:	7f 93       	push	r23
 3d6:	6f 93       	push	r22
 3d8:	7f 92       	push	r7
 3da:	6f 92       	push	r6
 3dc:	9f 92       	push	r9
 3de:	8f 92       	push	r8
 3e0:	0e 94 c0 03 	call	0x780	; 0x780 <sprintf>
				USART_StrTx(strvalorPWM );
 3e4:	c4 01       	movw	r24, r8
 3e6:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				USART_StrTx("%\r\n\n");
 3ea:	86 e4       	ldi	r24, 0x46	; 70
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				
				USART_StrTx("Aguadando Comando");
 3f2:	81 e1       	ldi	r24, 0x11	; 17
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				USART_StrTx("\r\n\n");
 3fa:	87 e4       	ldi	r24, 0x47	; 71
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				
				
				
				if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '6')
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	f5 01       	movw	r30, r10
 40e:	82 81       	ldd	r24, Z+2	; 0x02
 410:	84 34       	cpi	r24, 0x44	; 68
 412:	09 f0       	breq	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	6c c0       	rjmp	.+216    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 416:	83 81       	ldd	r24, Z+3	; 0x03
 418:	80 33       	cpi	r24, 0x30	; 48
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	b5 c0       	rjmp	.+362    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 41e:	94 81       	ldd	r25, Z+4	; 0x04
 420:	96 33       	cpi	r25, 0x36	; 54
 422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	ab c0       	rjmp	.+342    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
				{
					PwmD06SetDuty(valorPWM);
 426:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 42a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 42e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <PwmD06SetDuty>
					eeprom_write_byte((uint8_t *)6, valorPWM);
 432:	f2 01       	movw	r30, r4
 434:	60 81       	ld	r22, Z
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 43e:	70 c0       	rjmp	.+224    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '5')
				{
					PwmD05SetDuty(valorPWM);
 440:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 444:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 448:	0e 94 ee 02 	call	0x5dc	; 0x5dc <PwmD05SetDuty>
					eeprom_write_byte((uint8_t *)5, valorPWM);
 44c:	f2 01       	movw	r30, r4
 44e:	60 81       	ld	r22, Z
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 458:	63 c0       	rjmp	.+198    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '9')
 45a:	f5 01       	movw	r30, r10
 45c:	94 81       	ldd	r25, Z+4	; 0x04
 45e:	99 33       	cpi	r25, 0x39	; 57
 460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	96 c0       	rjmp	.+300    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				{
					PwmD09SetDuty(valorPWM);
 464:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 468:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 46c:	0e 94 07 03 	call	0x60e	; 0x60e <PwmD09SetDuty>
					eeprom_write_byte((uint8_t *)9, valorPWM);
 470:	f2 01       	movw	r30, r4
 472:	60 81       	ld	r22, Z
 474:	89 e0       	ldi	r24, 0x09	; 9
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 47c:	51 c0       	rjmp	.+162    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else if(buffer[2] == 'D' && buffer[3] == '1' && buffer[4] == '0')
 47e:	81 33       	cpi	r24, 0x31	; 49
 480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	8a c0       	rjmp	.+276    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 484:	f5 01       	movw	r30, r10
 486:	94 81       	ldd	r25, Z+4	; 0x04
 488:	90 33       	cpi	r25, 0x30	; 48
 48a:	f1 f4       	brne	.+60     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				{
					PwmD10SetDuty(valorPWM);
 48c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 490:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 494:	0e 94 23 03 	call	0x646	; 0x646 <PwmD10SetDuty>
					eeprom_write_byte((uint8_t *)10, valorPWM);
 498:	f2 01       	movw	r30, r4
 49a:	60 81       	ld	r22, Z
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 4a4:	3d c0       	rjmp	.+122    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '3')
 4a6:	f5 01       	movw	r30, r10
 4a8:	84 81       	ldd	r24, Z+4	; 0x04
 4aa:	83 33       	cpi	r24, 0x33	; 51
 4ac:	01 f5       	brne	.+64     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				{
					PwmD03SetDuty(valorPWM);
 4ae:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4b2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4b6:	0e 94 3f 03 	call	0x67e	; 0x67e <PwmD03SetDuty>
					eeprom_write_byte((uint8_t *)3, valorPWM);
 4ba:	f2 01       	movw	r30, r4
 4bc:	60 81       	ld	r22, Z
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 4c6:	2c c0       	rjmp	.+88     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else if(buffer[2] == 'D' && buffer[3] == '1' && buffer[4] == '1')
 4c8:	81 33       	cpi	r24, 0x31	; 49
 4ca:	89 f4       	brne	.+34     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4cc:	f5 01       	movw	r30, r10
 4ce:	84 81       	ldd	r24, Z+4	; 0x04
 4d0:	81 33       	cpi	r24, 0x31	; 49
 4d2:	69 f4       	brne	.+26     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				{
					PwmD11SetDuty(valorPWM);
 4d4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4d8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4dc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <PwmD11SetDuty>
					eeprom_write_byte((uint8_t *)11, valorPWM);
 4e0:	f2 01       	movw	r30, r4
 4e2:	60 81       	ld	r22, Z
 4e4:	8b e0       	ldi	r24, 0x0B	; 11
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <eeprom_write_byte>
 4ec:	19 c0       	rjmp	.+50     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				else
				{
					USART_StrTx("Comando Invalido");
 4ee:	8b e4       	ldi	r24, 0x4B	; 75
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
					USART_StrTx("\r\n");
 4f6:	83 e2       	ldi	r24, 0x23	; 35
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
					USART_StrTx("Aguadando Comando");
 4fe:	81 e1       	ldi	r24, 0x11	; 17
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
					USART_StrTx("\r\n\n");
 506:	87 e4       	ldi	r24, 0x47	; 71
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			{
				USART_Transmit(buffer[i]);
			}
			USART_StrTx("\r\n");
			if(buffer[1] == 'P' && buffer[5] == '_')
			{
 50e:	08 c0       	rjmp	.+16     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				}
				
			}
			else
			{
				USART_StrTx("Comando Invalido");
 510:	8b e4       	ldi	r24, 0x4B	; 75
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
				USART_StrTx("\r\n");
 518:	83 e2       	ldi	r24, 0x23	; 35
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			}
			contabuffer = 0;
 520:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <contabuffer+0x1>
 524:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <contabuffer>
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 528:	f7 01       	movw	r30, r14
 52a:	31 92       	st	Z+, r3
 52c:	7f 01       	movw	r14, r30
 52e:	0e 17       	cp	r16, r30
 530:	1f 07       	cpc	r17, r31
 532:	d1 f7       	brne	.-12     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 534:	c6 ce       	rjmp	.-628    	; 0x2c2 <main+0x92>
			
			
		}
		
		else if(buffer[0] == '[' && contabuffer > 0 && buffer[9] != ']')
 536:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <contabuffer>
 53a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <contabuffer+0x1>
 53e:	18 16       	cp	r1, r24
 540:	19 06       	cpc	r1, r25
 542:	0c f0       	brlt	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	be ce       	rjmp	.-644    	; 0x2c2 <main+0x92>
		{
			USART_StrTx("Comando Invalido");
 546:	8b e4       	ldi	r24, 0x4B	; 75
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			USART_StrTx("\r\n");
 54e:	83 e2       	ldi	r24, 0x23	; 35
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			USART_StrTx("Aguadando Comando");
 556:	81 e1       	ldi	r24, 0x11	; 17
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			USART_StrTx("\r\n\n");
 55e:	87 e4       	ldi	r24, 0x47	; 71
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 83 03 	call	0x706	; 0x706 <USART_StrTx>
			contabuffer = 0;
 566:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <contabuffer+0x1>
 56a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <contabuffer>
 56e:	e1 e0       	ldi	r30, 0x01	; 1
 570:	f1 e0       	ldi	r31, 0x01	; 1
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }	
 572:	31 92       	st	Z+, r3
 574:	0e 17       	cp	r16, r30
 576:	1f 07       	cpc	r17, r31
 578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 57a:	a3 ce       	rjmp	.-698    	; 0x2c2 <main+0x92>
				if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '6')
				{
					PwmD06SetDuty(valorPWM);
					eeprom_write_byte((uint8_t *)6, valorPWM);
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '5')
 57c:	f5 01       	movw	r30, r10
 57e:	94 81       	ldd	r25, Z+4	; 0x04
 580:	95 33       	cpi	r25, 0x35	; 53
 582:	09 f0       	breq	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 584:	6a cf       	rjmp	.-300    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 586:	5c cf       	rjmp	.-328    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				{
					PwmD05SetDuty(valorPWM);
					eeprom_write_byte((uint8_t *)5, valorPWM);
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '9')
 588:	80 33       	cpi	r24, 0x30	; 48
 58a:	09 f0       	breq	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 58c:	78 cf       	rjmp	.-272    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 58e:	65 cf       	rjmp	.-310    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				else if(buffer[2] == 'D' && buffer[3] == '1' && buffer[4] == '0')
				{
					PwmD10SetDuty(valorPWM);
					eeprom_write_byte((uint8_t *)10, valorPWM);
				}
				else if(buffer[2] == 'D' && buffer[3] == '0' && buffer[4] == '3')
 590:	80 33       	cpi	r24, 0x30	; 48
 592:	09 f0       	breq	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 594:	99 cf       	rjmp	.-206    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 596:	87 cf       	rjmp	.-242    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 598:	80 33       	cpi	r24, 0x30	; 48
 59a:	09 f0       	breq	.+2      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59c:	a8 cf       	rjmp	.-176    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 59e:	83 cf       	rjmp	.-250    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

000005a0 <PwmD06Init>:
//#define F_CPU 16000000UL

void PwmD06Init(void)
{
	//DDRD |= (1 << DDD5);
	DDRD |= (1 << DDD6);
 5a0:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1<<COM0A1) | (1 << WGM01) | (1 << WGM00);				// Fast PWM 8 bits, modo 5, non-inverting mode.
 5a2:	84 b5       	in	r24, 0x24	; 36
 5a4:	83 68       	ori	r24, 0x83	; 131
 5a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);					// Prescaler = 1. Fpwm = 8M/(256xPrescaler)=31,25Khz
 5a8:	85 b5       	in	r24, 0x25	; 37
 5aa:	82 60       	ori	r24, 0x02	; 2
 5ac:	85 bd       	out	0x25, r24	; 37
 5ae:	08 95       	ret

000005b0 <PwmD06SetDuty>:
}

void PwmD06SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR0A = ((int)Duty*255)/100;
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	ac 01       	movw	r20, r24
 5b4:	24 9f       	mul	r18, r20
 5b6:	c0 01       	movw	r24, r0
 5b8:	25 9f       	mul	r18, r21
 5ba:	90 0d       	add	r25, r0
 5bc:	11 24       	eor	r1, r1
 5be:	64 e6       	ldi	r22, 0x64	; 100
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 5c6:	67 bd       	out	0x27, r22	; 39
	OCR0B = ((int)Duty*255)/100;
 5c8:	68 bd       	out	0x28, r22	; 40
 5ca:	08 95       	ret

000005cc <PwmD05Init>:
}

void PwmD05Init(void)
{
	DDRD |= (1 << DDD5);
 5cc:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A |= (1<<COM0B1) | (1 << WGM01) | (1 << WGM00);
 5ce:	84 b5       	in	r24, 0x24	; 36
 5d0:	83 62       	ori	r24, 0x23	; 35
 5d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);
 5d4:	85 b5       	in	r24, 0x25	; 37
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	85 bd       	out	0x25, r24	; 37
 5da:	08 95       	ret

000005dc <PwmD05SetDuty>:
}

void PwmD05SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR0B = ((int)Duty*255)/100;
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	ac 01       	movw	r20, r24
 5e0:	24 9f       	mul	r18, r20
 5e2:	c0 01       	movw	r24, r0
 5e4:	25 9f       	mul	r18, r21
 5e6:	90 0d       	add	r25, r0
 5e8:	11 24       	eor	r1, r1
 5ea:	64 e6       	ldi	r22, 0x64	; 100
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 5f2:	68 bd       	out	0x28, r22	; 40
 5f4:	08 95       	ret

000005f6 <PwmD09Init>:
}

void PwmD09Init(void)
{
	DDRB |= (1 << DDB1);
 5f6:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) |  (1 << WGM10);
 5f8:	e0 e8       	ldi	r30, 0x80	; 128
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	81 6a       	ori	r24, 0xA1	; 161
 600:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11) | (1 << WGM12);
 602:	e1 e8       	ldi	r30, 0x81	; 129
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	8a 60       	ori	r24, 0x0A	; 10
 60a:	80 83       	st	Z, r24
 60c:	08 95       	ret

0000060e <PwmD09SetDuty>:
}

void PwmD09SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR1A = ((int)Duty*255)/100;
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	ac 01       	movw	r20, r24
 612:	24 9f       	mul	r18, r20
 614:	c0 01       	movw	r24, r0
 616:	25 9f       	mul	r18, r21
 618:	90 0d       	add	r25, r0
 61a:	11 24       	eor	r1, r1
 61c:	64 e6       	ldi	r22, 0x64	; 100
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 624:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 628:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 62c:	08 95       	ret

0000062e <PwmD10Init>:
}

void PwmD10Init(void)
{
	DDRB |= (1 << DDB2);
 62e:	22 9a       	sbi	0x04, 2	; 4
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) |  (1 << WGM10);
 630:	e0 e8       	ldi	r30, 0x80	; 128
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	81 6a       	ori	r24, 0xA1	; 161
 638:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11) | (1 << WGM12);
 63a:	e1 e8       	ldi	r30, 0x81	; 129
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	8a 60       	ori	r24, 0x0A	; 10
 642:	80 83       	st	Z, r24
 644:	08 95       	ret

00000646 <PwmD10SetDuty>:
}

void PwmD10SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR1B = ((int)Duty*255)/100;
 646:	2f ef       	ldi	r18, 0xFF	; 255
 648:	ac 01       	movw	r20, r24
 64a:	24 9f       	mul	r18, r20
 64c:	c0 01       	movw	r24, r0
 64e:	25 9f       	mul	r18, r21
 650:	90 0d       	add	r25, r0
 652:	11 24       	eor	r1, r1
 654:	64 e6       	ldi	r22, 0x64	; 100
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 65c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 660:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 664:	08 95       	ret

00000666 <PwmD03Init>:
}

void PwmD03Init(void)
{
	DDRD |= (1 << DDD3);
 666:	53 9a       	sbi	0x0a, 3	; 10
	TCCR2A |= (1<<COM2B1) | (1 << WGM21) | (1 << WGM20);
 668:	e0 eb       	ldi	r30, 0xB0	; 176
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	83 62       	ori	r24, 0x23	; 35
 670:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
 672:	e1 eb       	ldi	r30, 0xB1	; 177
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	82 60       	ori	r24, 0x02	; 2
 67a:	80 83       	st	Z, r24
 67c:	08 95       	ret

0000067e <PwmD03SetDuty>:
}

void PwmD03SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR2B = ((int)Duty*255)/100;
 67e:	2f ef       	ldi	r18, 0xFF	; 255
 680:	ac 01       	movw	r20, r24
 682:	24 9f       	mul	r18, r20
 684:	c0 01       	movw	r24, r0
 686:	25 9f       	mul	r18, r21
 688:	90 0d       	add	r25, r0
 68a:	11 24       	eor	r1, r1
 68c:	64 e6       	ldi	r22, 0x64	; 100
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 694:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 698:	08 95       	ret

0000069a <PwmD11Init>:
}

void PwmD11Init(void)
{
	DDRB |= (1 << DDB3);
 69a:	23 9a       	sbi	0x04, 3	; 4
	TCCR2A |= (1<<COM2A1) | (1 << WGM21) | (1 << WGM20);
 69c:	e0 eb       	ldi	r30, 0xB0	; 176
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	83 68       	ori	r24, 0x83	; 131
 6a4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
 6a6:	e1 eb       	ldi	r30, 0xB1	; 177
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	82 60       	ori	r24, 0x02	; 2
 6ae:	80 83       	st	Z, r24
 6b0:	08 95       	ret

000006b2 <PwmD11SetDuty>:
}

void PwmD11SetDuty(unsigned int Duty)			// Usa esta função quando quer ajuste de 0 100%
{
	OCR2A = ((int)Duty*255)/100;
 6b2:	2f ef       	ldi	r18, 0xFF	; 255
 6b4:	ac 01       	movw	r20, r24
 6b6:	24 9f       	mul	r18, r20
 6b8:	c0 01       	movw	r24, r0
 6ba:	25 9f       	mul	r18, r21
 6bc:	90 0d       	add	r25, r0
 6be:	11 24       	eor	r1, r1
 6c0:	64 e6       	ldi	r22, 0x64	; 100
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	0e 94 98 03 	call	0x730	; 0x730 <__divmodhi4>
 6c8:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 6cc:	08 95       	ret

000006ce <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t)(MYUBRR>>8);				// Ajuste da transmissão em 9600 bps
 6ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(MYUBRR);
 6d2:	87 e6       	ldi	r24, 0x67	; 103
 6d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissão e recepção
 6d8:	88 e1       	ldi	r24, 0x18	; 24
 6da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 6e4:	08 95       	ret

000006e6 <USART_Transmit>:
}
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 6e6:	e0 ec       	ldi	r30, 0xC0	; 192
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	90 81       	ld	r25, Z
 6ec:	95 ff       	sbrs	r25, 5
 6ee:	fd cf       	rjmp	.-6      	; 0x6ea <USART_Transmit+0x4>
	UDR0 = data;								// Envia o dado pela porta serial
 6f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6f4:	08 95       	ret

000006f6 <USART_Receive>:
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
	while(!(UCSR0A & (1<<RXC0)));				// Espera o dado ser recebido
 6f6:	e0 ec       	ldi	r30, 0xC0	; 192
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	88 23       	and	r24, r24
 6fe:	ec f7       	brge	.-6      	; 0x6fa <USART_Receive+0x4>
	return UDR0;
 700:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 704:	08 95       	ret

00000706 <USART_StrTx>:

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 70c:	88 81       	ld	r24, Y
 70e:	88 23       	and	r24, r24
 710:	31 f0       	breq	.+12     	; 0x71e <USART_StrTx+0x18>
 712:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(*ptr);
 714:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_Transmit>
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 718:	89 91       	ld	r24, Y+
 71a:	81 11       	cpse	r24, r1
 71c:	fb cf       	rjmp	.-10     	; 0x714 <USART_StrTx+0xe>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 724:	e1 ec       	ldi	r30, 0xC1	; 193
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	80 83       	st	Z, r24
 72e:	08 95       	ret

00000730 <__divmodhi4>:
 730:	97 fb       	bst	r25, 7
 732:	07 2e       	mov	r0, r23
 734:	16 f4       	brtc	.+4      	; 0x73a <__divmodhi4+0xa>
 736:	00 94       	com	r0
 738:	07 d0       	rcall	.+14     	; 0x748 <__divmodhi4_neg1>
 73a:	77 fd       	sbrc	r23, 7
 73c:	09 d0       	rcall	.+18     	; 0x750 <__divmodhi4_neg2>
 73e:	0e 94 ac 03 	call	0x758	; 0x758 <__udivmodhi4>
 742:	07 fc       	sbrc	r0, 7
 744:	05 d0       	rcall	.+10     	; 0x750 <__divmodhi4_neg2>
 746:	3e f4       	brtc	.+14     	; 0x756 <__divmodhi4_exit>

00000748 <__divmodhi4_neg1>:
 748:	90 95       	com	r25
 74a:	81 95       	neg	r24
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__divmodhi4_neg2>:
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255

00000756 <__divmodhi4_exit>:
 756:	08 95       	ret

00000758 <__udivmodhi4>:
 758:	aa 1b       	sub	r26, r26
 75a:	bb 1b       	sub	r27, r27
 75c:	51 e1       	ldi	r21, 0x11	; 17
 75e:	07 c0       	rjmp	.+14     	; 0x76e <__udivmodhi4_ep>

00000760 <__udivmodhi4_loop>:
 760:	aa 1f       	adc	r26, r26
 762:	bb 1f       	adc	r27, r27
 764:	a6 17       	cp	r26, r22
 766:	b7 07       	cpc	r27, r23
 768:	10 f0       	brcs	.+4      	; 0x76e <__udivmodhi4_ep>
 76a:	a6 1b       	sub	r26, r22
 76c:	b7 0b       	sbc	r27, r23

0000076e <__udivmodhi4_ep>:
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	5a 95       	dec	r21
 774:	a9 f7       	brne	.-22     	; 0x760 <__udivmodhi4_loop>
 776:	80 95       	com	r24
 778:	90 95       	com	r25
 77a:	bc 01       	movw	r22, r24
 77c:	cd 01       	movw	r24, r26
 77e:	08 95       	ret

00000780 <sprintf>:
 780:	ae e0       	ldi	r26, 0x0E	; 14
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	e6 ec       	ldi	r30, 0xC6	; 198
 786:	f3 e0       	ldi	r31, 0x03	; 3
 788:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__prologue_saves__+0x1c>
 78c:	0d 89       	ldd	r16, Y+21	; 0x15
 78e:	1e 89       	ldd	r17, Y+22	; 0x16
 790:	86 e0       	ldi	r24, 0x06	; 6
 792:	8c 83       	std	Y+4, r24	; 0x04
 794:	1a 83       	std	Y+2, r17	; 0x02
 796:	09 83       	std	Y+1, r16	; 0x01
 798:	8f ef       	ldi	r24, 0xFF	; 255
 79a:	9f e7       	ldi	r25, 0x7F	; 127
 79c:	9e 83       	std	Y+6, r25	; 0x06
 79e:	8d 83       	std	Y+5, r24	; 0x05
 7a0:	ae 01       	movw	r20, r28
 7a2:	47 5e       	subi	r20, 0xE7	; 231
 7a4:	5f 4f       	sbci	r21, 0xFF	; 255
 7a6:	6f 89       	ldd	r22, Y+23	; 0x17
 7a8:	78 8d       	ldd	r23, Y+24	; 0x18
 7aa:	ce 01       	movw	r24, r28
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vfprintf>
 7b2:	ef 81       	ldd	r30, Y+7	; 0x07
 7b4:	f8 85       	ldd	r31, Y+8	; 0x08
 7b6:	e0 0f       	add	r30, r16
 7b8:	f1 1f       	adc	r31, r17
 7ba:	10 82       	st	Z, r1
 7bc:	2e 96       	adiw	r28, 0x0e	; 14
 7be:	e4 e0       	ldi	r30, 0x04	; 4
 7c0:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__epilogue_restores__+0x1c>

000007c4 <vfprintf>:
 7c4:	ab e0       	ldi	r26, 0x0B	; 11
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e8 ee       	ldi	r30, 0xE8	; 232
 7ca:	f3 e0       	ldi	r31, 0x03	; 3
 7cc:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__prologue_saves__>
 7d0:	6c 01       	movw	r12, r24
 7d2:	7b 01       	movw	r14, r22
 7d4:	8a 01       	movw	r16, r20
 7d6:	fc 01       	movw	r30, r24
 7d8:	17 82       	std	Z+7, r1	; 0x07
 7da:	16 82       	std	Z+6, r1	; 0x06
 7dc:	83 81       	ldd	r24, Z+3	; 0x03
 7de:	81 ff       	sbrs	r24, 1
 7e0:	cc c1       	rjmp	.+920    	; 0xb7a <__stack+0x27b>
 7e2:	ce 01       	movw	r24, r28
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	3c 01       	movw	r6, r24
 7e8:	f6 01       	movw	r30, r12
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	f7 01       	movw	r30, r14
 7ee:	93 fd       	sbrc	r25, 3
 7f0:	85 91       	lpm	r24, Z+
 7f2:	93 ff       	sbrs	r25, 3
 7f4:	81 91       	ld	r24, Z+
 7f6:	7f 01       	movw	r14, r30
 7f8:	88 23       	and	r24, r24
 7fa:	09 f4       	brne	.+2      	; 0x7fe <vfprintf+0x3a>
 7fc:	ba c1       	rjmp	.+884    	; 0xb72 <__stack+0x273>
 7fe:	85 32       	cpi	r24, 0x25	; 37
 800:	39 f4       	brne	.+14     	; 0x810 <vfprintf+0x4c>
 802:	93 fd       	sbrc	r25, 3
 804:	85 91       	lpm	r24, Z+
 806:	93 ff       	sbrs	r25, 3
 808:	81 91       	ld	r24, Z+
 80a:	7f 01       	movw	r14, r30
 80c:	85 32       	cpi	r24, 0x25	; 37
 80e:	29 f4       	brne	.+10     	; 0x81a <vfprintf+0x56>
 810:	b6 01       	movw	r22, r12
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 818:	e7 cf       	rjmp	.-50     	; 0x7e8 <vfprintf+0x24>
 81a:	91 2c       	mov	r9, r1
 81c:	21 2c       	mov	r2, r1
 81e:	31 2c       	mov	r3, r1
 820:	ff e1       	ldi	r31, 0x1F	; 31
 822:	f3 15       	cp	r31, r3
 824:	d8 f0       	brcs	.+54     	; 0x85c <vfprintf+0x98>
 826:	8b 32       	cpi	r24, 0x2B	; 43
 828:	79 f0       	breq	.+30     	; 0x848 <vfprintf+0x84>
 82a:	38 f4       	brcc	.+14     	; 0x83a <vfprintf+0x76>
 82c:	80 32       	cpi	r24, 0x20	; 32
 82e:	79 f0       	breq	.+30     	; 0x84e <vfprintf+0x8a>
 830:	83 32       	cpi	r24, 0x23	; 35
 832:	a1 f4       	brne	.+40     	; 0x85c <vfprintf+0x98>
 834:	23 2d       	mov	r18, r3
 836:	20 61       	ori	r18, 0x10	; 16
 838:	1d c0       	rjmp	.+58     	; 0x874 <vfprintf+0xb0>
 83a:	8d 32       	cpi	r24, 0x2D	; 45
 83c:	61 f0       	breq	.+24     	; 0x856 <vfprintf+0x92>
 83e:	80 33       	cpi	r24, 0x30	; 48
 840:	69 f4       	brne	.+26     	; 0x85c <vfprintf+0x98>
 842:	23 2d       	mov	r18, r3
 844:	21 60       	ori	r18, 0x01	; 1
 846:	16 c0       	rjmp	.+44     	; 0x874 <vfprintf+0xb0>
 848:	83 2d       	mov	r24, r3
 84a:	82 60       	ori	r24, 0x02	; 2
 84c:	38 2e       	mov	r3, r24
 84e:	e3 2d       	mov	r30, r3
 850:	e4 60       	ori	r30, 0x04	; 4
 852:	3e 2e       	mov	r3, r30
 854:	2a c0       	rjmp	.+84     	; 0x8aa <vfprintf+0xe6>
 856:	f3 2d       	mov	r31, r3
 858:	f8 60       	ori	r31, 0x08	; 8
 85a:	1d c0       	rjmp	.+58     	; 0x896 <vfprintf+0xd2>
 85c:	37 fc       	sbrc	r3, 7
 85e:	2d c0       	rjmp	.+90     	; 0x8ba <vfprintf+0xf6>
 860:	20 ed       	ldi	r18, 0xD0	; 208
 862:	28 0f       	add	r18, r24
 864:	2a 30       	cpi	r18, 0x0A	; 10
 866:	40 f0       	brcs	.+16     	; 0x878 <vfprintf+0xb4>
 868:	8e 32       	cpi	r24, 0x2E	; 46
 86a:	b9 f4       	brne	.+46     	; 0x89a <vfprintf+0xd6>
 86c:	36 fc       	sbrc	r3, 6
 86e:	81 c1       	rjmp	.+770    	; 0xb72 <__stack+0x273>
 870:	23 2d       	mov	r18, r3
 872:	20 64       	ori	r18, 0x40	; 64
 874:	32 2e       	mov	r3, r18
 876:	19 c0       	rjmp	.+50     	; 0x8aa <vfprintf+0xe6>
 878:	36 fe       	sbrs	r3, 6
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0xc4>
 87c:	8a e0       	ldi	r24, 0x0A	; 10
 87e:	98 9e       	mul	r9, r24
 880:	20 0d       	add	r18, r0
 882:	11 24       	eor	r1, r1
 884:	92 2e       	mov	r9, r18
 886:	11 c0       	rjmp	.+34     	; 0x8aa <vfprintf+0xe6>
 888:	ea e0       	ldi	r30, 0x0A	; 10
 88a:	2e 9e       	mul	r2, r30
 88c:	20 0d       	add	r18, r0
 88e:	11 24       	eor	r1, r1
 890:	22 2e       	mov	r2, r18
 892:	f3 2d       	mov	r31, r3
 894:	f0 62       	ori	r31, 0x20	; 32
 896:	3f 2e       	mov	r3, r31
 898:	08 c0       	rjmp	.+16     	; 0x8aa <vfprintf+0xe6>
 89a:	8c 36       	cpi	r24, 0x6C	; 108
 89c:	21 f4       	brne	.+8      	; 0x8a6 <vfprintf+0xe2>
 89e:	83 2d       	mov	r24, r3
 8a0:	80 68       	ori	r24, 0x80	; 128
 8a2:	38 2e       	mov	r3, r24
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0xe6>
 8a6:	88 36       	cpi	r24, 0x68	; 104
 8a8:	41 f4       	brne	.+16     	; 0x8ba <vfprintf+0xf6>
 8aa:	f7 01       	movw	r30, r14
 8ac:	93 fd       	sbrc	r25, 3
 8ae:	85 91       	lpm	r24, Z+
 8b0:	93 ff       	sbrs	r25, 3
 8b2:	81 91       	ld	r24, Z+
 8b4:	7f 01       	movw	r14, r30
 8b6:	81 11       	cpse	r24, r1
 8b8:	b3 cf       	rjmp	.-154    	; 0x820 <vfprintf+0x5c>
 8ba:	98 2f       	mov	r25, r24
 8bc:	9f 7d       	andi	r25, 0xDF	; 223
 8be:	95 54       	subi	r25, 0x45	; 69
 8c0:	93 30       	cpi	r25, 0x03	; 3
 8c2:	28 f4       	brcc	.+10     	; 0x8ce <vfprintf+0x10a>
 8c4:	0c 5f       	subi	r16, 0xFC	; 252
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	9f e3       	ldi	r25, 0x3F	; 63
 8ca:	99 83       	std	Y+1, r25	; 0x01
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <vfprintf+0x124>
 8ce:	83 36       	cpi	r24, 0x63	; 99
 8d0:	31 f0       	breq	.+12     	; 0x8de <vfprintf+0x11a>
 8d2:	83 37       	cpi	r24, 0x73	; 115
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <vfprintf+0x12e>
 8d6:	83 35       	cpi	r24, 0x53	; 83
 8d8:	09 f0       	breq	.+2      	; 0x8dc <vfprintf+0x118>
 8da:	59 c0       	rjmp	.+178    	; 0x98e <__stack+0x8f>
 8dc:	21 c0       	rjmp	.+66     	; 0x920 <__stack+0x21>
 8de:	f8 01       	movw	r30, r16
 8e0:	80 81       	ld	r24, Z
 8e2:	89 83       	std	Y+1, r24	; 0x01
 8e4:	0e 5f       	subi	r16, 0xFE	; 254
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	88 24       	eor	r8, r8
 8ea:	83 94       	inc	r8
 8ec:	91 2c       	mov	r9, r1
 8ee:	53 01       	movw	r10, r6
 8f0:	13 c0       	rjmp	.+38     	; 0x918 <__stack+0x19>
 8f2:	28 01       	movw	r4, r16
 8f4:	f2 e0       	ldi	r31, 0x02	; 2
 8f6:	4f 0e       	add	r4, r31
 8f8:	51 1c       	adc	r5, r1
 8fa:	f8 01       	movw	r30, r16
 8fc:	a0 80       	ld	r10, Z
 8fe:	b1 80       	ldd	r11, Z+1	; 0x01
 900:	36 fe       	sbrs	r3, 6
 902:	03 c0       	rjmp	.+6      	; 0x90a <__stack+0xb>
 904:	69 2d       	mov	r22, r9
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	6f ef       	ldi	r22, 0xFF	; 255
 90c:	7f ef       	ldi	r23, 0xFF	; 255
 90e:	c5 01       	movw	r24, r10
 910:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strnlen>
 914:	4c 01       	movw	r8, r24
 916:	82 01       	movw	r16, r4
 918:	f3 2d       	mov	r31, r3
 91a:	ff 77       	andi	r31, 0x7F	; 127
 91c:	3f 2e       	mov	r3, r31
 91e:	16 c0       	rjmp	.+44     	; 0x94c <__stack+0x4d>
 920:	28 01       	movw	r4, r16
 922:	22 e0       	ldi	r18, 0x02	; 2
 924:	42 0e       	add	r4, r18
 926:	51 1c       	adc	r5, r1
 928:	f8 01       	movw	r30, r16
 92a:	a0 80       	ld	r10, Z
 92c:	b1 80       	ldd	r11, Z+1	; 0x01
 92e:	36 fe       	sbrs	r3, 6
 930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
 932:	69 2d       	mov	r22, r9
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
 938:	6f ef       	ldi	r22, 0xFF	; 255
 93a:	7f ef       	ldi	r23, 0xFF	; 255
 93c:	c5 01       	movw	r24, r10
 93e:	0e 94 c3 05 	call	0xb86	; 0xb86 <strnlen_P>
 942:	4c 01       	movw	r8, r24
 944:	f3 2d       	mov	r31, r3
 946:	f0 68       	ori	r31, 0x80	; 128
 948:	3f 2e       	mov	r3, r31
 94a:	82 01       	movw	r16, r4
 94c:	33 fc       	sbrc	r3, 3
 94e:	1b c0       	rjmp	.+54     	; 0x986 <__stack+0x87>
 950:	82 2d       	mov	r24, r2
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	88 16       	cp	r8, r24
 956:	99 06       	cpc	r9, r25
 958:	b0 f4       	brcc	.+44     	; 0x986 <__stack+0x87>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 964:	2a 94       	dec	r2
 966:	f4 cf       	rjmp	.-24     	; 0x950 <__stack+0x51>
 968:	f5 01       	movw	r30, r10
 96a:	37 fc       	sbrc	r3, 7
 96c:	85 91       	lpm	r24, Z+
 96e:	37 fe       	sbrs	r3, 7
 970:	81 91       	ld	r24, Z+
 972:	5f 01       	movw	r10, r30
 974:	b6 01       	movw	r22, r12
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 97c:	21 10       	cpse	r2, r1
 97e:	2a 94       	dec	r2
 980:	21 e0       	ldi	r18, 0x01	; 1
 982:	82 1a       	sub	r8, r18
 984:	91 08       	sbc	r9, r1
 986:	81 14       	cp	r8, r1
 988:	91 04       	cpc	r9, r1
 98a:	71 f7       	brne	.-36     	; 0x968 <__stack+0x69>
 98c:	e8 c0       	rjmp	.+464    	; 0xb5e <__stack+0x25f>
 98e:	84 36       	cpi	r24, 0x64	; 100
 990:	11 f0       	breq	.+4      	; 0x996 <__stack+0x97>
 992:	89 36       	cpi	r24, 0x69	; 105
 994:	41 f5       	brne	.+80     	; 0x9e6 <__stack+0xe7>
 996:	f8 01       	movw	r30, r16
 998:	37 fe       	sbrs	r3, 7
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <__stack+0xab>
 99c:	60 81       	ld	r22, Z
 99e:	71 81       	ldd	r23, Z+1	; 0x01
 9a0:	82 81       	ldd	r24, Z+2	; 0x02
 9a2:	93 81       	ldd	r25, Z+3	; 0x03
 9a4:	0c 5f       	subi	r16, 0xFC	; 252
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__stack+0xbb>
 9aa:	60 81       	ld	r22, Z
 9ac:	71 81       	ldd	r23, Z+1	; 0x01
 9ae:	07 2e       	mov	r0, r23
 9b0:	00 0c       	add	r0, r0
 9b2:	88 0b       	sbc	r24, r24
 9b4:	99 0b       	sbc	r25, r25
 9b6:	0e 5f       	subi	r16, 0xFE	; 254
 9b8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ba:	f3 2d       	mov	r31, r3
 9bc:	ff 76       	andi	r31, 0x6F	; 111
 9be:	3f 2e       	mov	r3, r31
 9c0:	97 ff       	sbrs	r25, 7
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__stack+0xd7>
 9c4:	90 95       	com	r25
 9c6:	80 95       	com	r24
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	f0 68       	ori	r31, 0x80	; 128
 9d4:	3f 2e       	mov	r3, r31
 9d6:	2a e0       	ldi	r18, 0x0A	; 10
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	a3 01       	movw	r20, r6
 9dc:	0e 94 15 06 	call	0xc2a	; 0xc2a <__ultoa_invert>
 9e0:	88 2e       	mov	r8, r24
 9e2:	86 18       	sub	r8, r6
 9e4:	45 c0       	rjmp	.+138    	; 0xa70 <__stack+0x171>
 9e6:	85 37       	cpi	r24, 0x75	; 117
 9e8:	31 f4       	brne	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	23 2d       	mov	r18, r3
 9ec:	2f 7e       	andi	r18, 0xEF	; 239
 9ee:	b2 2e       	mov	r11, r18
 9f0:	2a e0       	ldi	r18, 0x0A	; 10
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	25 c0       	rjmp	.+74     	; 0xa40 <__stack+0x141>
 9f6:	93 2d       	mov	r25, r3
 9f8:	99 7f       	andi	r25, 0xF9	; 249
 9fa:	b9 2e       	mov	r11, r25
 9fc:	8f 36       	cpi	r24, 0x6F	; 111
 9fe:	c1 f0       	breq	.+48     	; 0xa30 <__stack+0x131>
 a00:	18 f4       	brcc	.+6      	; 0xa08 <__stack+0x109>
 a02:	88 35       	cpi	r24, 0x58	; 88
 a04:	79 f0       	breq	.+30     	; 0xa24 <__stack+0x125>
 a06:	b5 c0       	rjmp	.+362    	; 0xb72 <__stack+0x273>
 a08:	80 37       	cpi	r24, 0x70	; 112
 a0a:	19 f0       	breq	.+6      	; 0xa12 <__stack+0x113>
 a0c:	88 37       	cpi	r24, 0x78	; 120
 a0e:	21 f0       	breq	.+8      	; 0xa18 <__stack+0x119>
 a10:	b0 c0       	rjmp	.+352    	; 0xb72 <__stack+0x273>
 a12:	e9 2f       	mov	r30, r25
 a14:	e0 61       	ori	r30, 0x10	; 16
 a16:	be 2e       	mov	r11, r30
 a18:	b4 fe       	sbrs	r11, 4
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__stack+0x137>
 a1c:	fb 2d       	mov	r31, r11
 a1e:	f4 60       	ori	r31, 0x04	; 4
 a20:	bf 2e       	mov	r11, r31
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <__stack+0x137>
 a24:	34 fe       	sbrs	r3, 4
 a26:	0a c0       	rjmp	.+20     	; 0xa3c <__stack+0x13d>
 a28:	29 2f       	mov	r18, r25
 a2a:	26 60       	ori	r18, 0x06	; 6
 a2c:	b2 2e       	mov	r11, r18
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <__stack+0x13d>
 a30:	28 e0       	ldi	r18, 0x08	; 8
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	05 c0       	rjmp	.+10     	; 0xa40 <__stack+0x141>
 a36:	20 e1       	ldi	r18, 0x10	; 16
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	20 e1       	ldi	r18, 0x10	; 16
 a3e:	32 e0       	ldi	r19, 0x02	; 2
 a40:	f8 01       	movw	r30, r16
 a42:	b7 fe       	sbrs	r11, 7
 a44:	07 c0       	rjmp	.+14     	; 0xa54 <__stack+0x155>
 a46:	60 81       	ld	r22, Z
 a48:	71 81       	ldd	r23, Z+1	; 0x01
 a4a:	82 81       	ldd	r24, Z+2	; 0x02
 a4c:	93 81       	ldd	r25, Z+3	; 0x03
 a4e:	0c 5f       	subi	r16, 0xFC	; 252
 a50:	1f 4f       	sbci	r17, 0xFF	; 255
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <__stack+0x161>
 a54:	60 81       	ld	r22, Z
 a56:	71 81       	ldd	r23, Z+1	; 0x01
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 5f       	subi	r16, 0xFE	; 254
 a5e:	1f 4f       	sbci	r17, 0xFF	; 255
 a60:	a3 01       	movw	r20, r6
 a62:	0e 94 15 06 	call	0xc2a	; 0xc2a <__ultoa_invert>
 a66:	88 2e       	mov	r8, r24
 a68:	86 18       	sub	r8, r6
 a6a:	fb 2d       	mov	r31, r11
 a6c:	ff 77       	andi	r31, 0x7F	; 127
 a6e:	3f 2e       	mov	r3, r31
 a70:	36 fe       	sbrs	r3, 6
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <__stack+0x18f>
 a74:	23 2d       	mov	r18, r3
 a76:	2e 7f       	andi	r18, 0xFE	; 254
 a78:	a2 2e       	mov	r10, r18
 a7a:	89 14       	cp	r8, r9
 a7c:	58 f4       	brcc	.+22     	; 0xa94 <__stack+0x195>
 a7e:	34 fe       	sbrs	r3, 4
 a80:	0b c0       	rjmp	.+22     	; 0xa98 <__stack+0x199>
 a82:	32 fc       	sbrc	r3, 2
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__stack+0x199>
 a86:	83 2d       	mov	r24, r3
 a88:	8e 7e       	andi	r24, 0xEE	; 238
 a8a:	a8 2e       	mov	r10, r24
 a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__stack+0x199>
 a8e:	b8 2c       	mov	r11, r8
 a90:	a3 2c       	mov	r10, r3
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <__stack+0x19b>
 a94:	b8 2c       	mov	r11, r8
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <__stack+0x19b>
 a98:	b9 2c       	mov	r11, r9
 a9a:	a4 fe       	sbrs	r10, 4
 a9c:	0f c0       	rjmp	.+30     	; 0xabc <__stack+0x1bd>
 a9e:	fe 01       	movw	r30, r28
 aa0:	e8 0d       	add	r30, r8
 aa2:	f1 1d       	adc	r31, r1
 aa4:	80 81       	ld	r24, Z
 aa6:	80 33       	cpi	r24, 0x30	; 48
 aa8:	21 f4       	brne	.+8      	; 0xab2 <__stack+0x1b3>
 aaa:	9a 2d       	mov	r25, r10
 aac:	99 7e       	andi	r25, 0xE9	; 233
 aae:	a9 2e       	mov	r10, r25
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__stack+0x1c5>
 ab2:	a2 fe       	sbrs	r10, 2
 ab4:	06 c0       	rjmp	.+12     	; 0xac2 <__stack+0x1c3>
 ab6:	b3 94       	inc	r11
 ab8:	b3 94       	inc	r11
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <__stack+0x1c5>
 abc:	8a 2d       	mov	r24, r10
 abe:	86 78       	andi	r24, 0x86	; 134
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__stack+0x1c5>
 ac2:	b3 94       	inc	r11
 ac4:	a3 fc       	sbrc	r10, 3
 ac6:	11 c0       	rjmp	.+34     	; 0xaea <__stack+0x1eb>
 ac8:	a0 fe       	sbrs	r10, 0
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <__stack+0x1d9>
 acc:	b2 14       	cp	r11, r2
 ace:	88 f4       	brcc	.+34     	; 0xaf2 <__stack+0x1f3>
 ad0:	28 0c       	add	r2, r8
 ad2:	92 2c       	mov	r9, r2
 ad4:	9b 18       	sub	r9, r11
 ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <__stack+0x1f5>
 ad8:	b2 14       	cp	r11, r2
 ada:	60 f4       	brcc	.+24     	; 0xaf4 <__stack+0x1f5>
 adc:	b6 01       	movw	r22, r12
 ade:	80 e2       	ldi	r24, 0x20	; 32
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 ae6:	b3 94       	inc	r11
 ae8:	f7 cf       	rjmp	.-18     	; 0xad8 <__stack+0x1d9>
 aea:	b2 14       	cp	r11, r2
 aec:	18 f4       	brcc	.+6      	; 0xaf4 <__stack+0x1f5>
 aee:	2b 18       	sub	r2, r11
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__stack+0x1f7>
 af2:	98 2c       	mov	r9, r8
 af4:	21 2c       	mov	r2, r1
 af6:	a4 fe       	sbrs	r10, 4
 af8:	10 c0       	rjmp	.+32     	; 0xb1a <__stack+0x21b>
 afa:	b6 01       	movw	r22, r12
 afc:	80 e3       	ldi	r24, 0x30	; 48
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 b04:	a2 fe       	sbrs	r10, 2
 b06:	17 c0       	rjmp	.+46     	; 0xb36 <__stack+0x237>
 b08:	a1 fc       	sbrc	r10, 1
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <__stack+0x213>
 b0c:	88 e7       	ldi	r24, 0x78	; 120
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x217>
 b12:	88 e5       	ldi	r24, 0x58	; 88
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	b6 01       	movw	r22, r12
 b18:	0c c0       	rjmp	.+24     	; 0xb32 <__stack+0x233>
 b1a:	8a 2d       	mov	r24, r10
 b1c:	86 78       	andi	r24, 0x86	; 134
 b1e:	59 f0       	breq	.+22     	; 0xb36 <__stack+0x237>
 b20:	a1 fe       	sbrs	r10, 1
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <__stack+0x229>
 b24:	8b e2       	ldi	r24, 0x2B	; 43
 b26:	01 c0       	rjmp	.+2      	; 0xb2a <__stack+0x22b>
 b28:	80 e2       	ldi	r24, 0x20	; 32
 b2a:	a7 fc       	sbrc	r10, 7
 b2c:	8d e2       	ldi	r24, 0x2D	; 45
 b2e:	b6 01       	movw	r22, r12
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 b36:	89 14       	cp	r8, r9
 b38:	38 f4       	brcc	.+14     	; 0xb48 <__stack+0x249>
 b3a:	b6 01       	movw	r22, r12
 b3c:	80 e3       	ldi	r24, 0x30	; 48
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 b44:	9a 94       	dec	r9
 b46:	f7 cf       	rjmp	.-18     	; 0xb36 <__stack+0x237>
 b48:	8a 94       	dec	r8
 b4a:	f3 01       	movw	r30, r6
 b4c:	e8 0d       	add	r30, r8
 b4e:	f1 1d       	adc	r31, r1
 b50:	80 81       	ld	r24, Z
 b52:	b6 01       	movw	r22, r12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 b5a:	81 10       	cpse	r8, r1
 b5c:	f5 cf       	rjmp	.-22     	; 0xb48 <__stack+0x249>
 b5e:	22 20       	and	r2, r2
 b60:	09 f4       	brne	.+2      	; 0xb64 <__stack+0x265>
 b62:	42 ce       	rjmp	.-892    	; 0x7e8 <vfprintf+0x24>
 b64:	b6 01       	movw	r22, r12
 b66:	80 e2       	ldi	r24, 0x20	; 32
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <fputc>
 b6e:	2a 94       	dec	r2
 b70:	f6 cf       	rjmp	.-20     	; 0xb5e <__stack+0x25f>
 b72:	f6 01       	movw	r30, r12
 b74:	86 81       	ldd	r24, Z+6	; 0x06
 b76:	97 81       	ldd	r25, Z+7	; 0x07
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <__stack+0x27f>
 b7a:	8f ef       	ldi	r24, 0xFF	; 255
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	2b 96       	adiw	r28, 0x0b	; 11
 b80:	e2 e1       	ldi	r30, 0x12	; 18
 b82:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__epilogue_restores__>

00000b86 <strnlen_P>:
 b86:	fc 01       	movw	r30, r24
 b88:	05 90       	lpm	r0, Z+
 b8a:	61 50       	subi	r22, 0x01	; 1
 b8c:	70 40       	sbci	r23, 0x00	; 0
 b8e:	01 10       	cpse	r0, r1
 b90:	d8 f7       	brcc	.-10     	; 0xb88 <strnlen_P+0x2>
 b92:	80 95       	com	r24
 b94:	90 95       	com	r25
 b96:	8e 0f       	add	r24, r30
 b98:	9f 1f       	adc	r25, r31
 b9a:	08 95       	ret

00000b9c <strnlen>:
 b9c:	fc 01       	movw	r30, r24
 b9e:	61 50       	subi	r22, 0x01	; 1
 ba0:	70 40       	sbci	r23, 0x00	; 0
 ba2:	01 90       	ld	r0, Z+
 ba4:	01 10       	cpse	r0, r1
 ba6:	d8 f7       	brcc	.-10     	; 0xb9e <strnlen+0x2>
 ba8:	80 95       	com	r24
 baa:	90 95       	com	r25
 bac:	8e 0f       	add	r24, r30
 bae:	9f 1f       	adc	r25, r31
 bb0:	08 95       	ret

00000bb2 <fputc>:
 bb2:	0f 93       	push	r16
 bb4:	1f 93       	push	r17
 bb6:	cf 93       	push	r28
 bb8:	df 93       	push	r29
 bba:	fb 01       	movw	r30, r22
 bbc:	23 81       	ldd	r18, Z+3	; 0x03
 bbe:	21 fd       	sbrc	r18, 1
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <fputc+0x16>
 bc2:	8f ef       	ldi	r24, 0xFF	; 255
 bc4:	9f ef       	ldi	r25, 0xFF	; 255
 bc6:	2c c0       	rjmp	.+88     	; 0xc20 <fputc+0x6e>
 bc8:	22 ff       	sbrs	r18, 2
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <fputc+0x46>
 bcc:	46 81       	ldd	r20, Z+6	; 0x06
 bce:	57 81       	ldd	r21, Z+7	; 0x07
 bd0:	24 81       	ldd	r18, Z+4	; 0x04
 bd2:	35 81       	ldd	r19, Z+5	; 0x05
 bd4:	42 17       	cp	r20, r18
 bd6:	53 07       	cpc	r21, r19
 bd8:	44 f4       	brge	.+16     	; 0xbea <fputc+0x38>
 bda:	a0 81       	ld	r26, Z
 bdc:	b1 81       	ldd	r27, Z+1	; 0x01
 bde:	9d 01       	movw	r18, r26
 be0:	2f 5f       	subi	r18, 0xFF	; 255
 be2:	3f 4f       	sbci	r19, 0xFF	; 255
 be4:	31 83       	std	Z+1, r19	; 0x01
 be6:	20 83       	st	Z, r18
 be8:	8c 93       	st	X, r24
 bea:	26 81       	ldd	r18, Z+6	; 0x06
 bec:	37 81       	ldd	r19, Z+7	; 0x07
 bee:	2f 5f       	subi	r18, 0xFF	; 255
 bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 bf2:	37 83       	std	Z+7, r19	; 0x07
 bf4:	26 83       	std	Z+6, r18	; 0x06
 bf6:	14 c0       	rjmp	.+40     	; 0xc20 <fputc+0x6e>
 bf8:	8b 01       	movw	r16, r22
 bfa:	ec 01       	movw	r28, r24
 bfc:	fb 01       	movw	r30, r22
 bfe:	00 84       	ldd	r0, Z+8	; 0x08
 c00:	f1 85       	ldd	r31, Z+9	; 0x09
 c02:	e0 2d       	mov	r30, r0
 c04:	09 95       	icall
 c06:	89 2b       	or	r24, r25
 c08:	e1 f6       	brne	.-72     	; 0xbc2 <fputc+0x10>
 c0a:	d8 01       	movw	r26, r16
 c0c:	16 96       	adiw	r26, 0x06	; 6
 c0e:	8d 91       	ld	r24, X+
 c10:	9c 91       	ld	r25, X
 c12:	17 97       	sbiw	r26, 0x07	; 7
 c14:	01 96       	adiw	r24, 0x01	; 1
 c16:	17 96       	adiw	r26, 0x07	; 7
 c18:	9c 93       	st	X, r25
 c1a:	8e 93       	st	-X, r24
 c1c:	16 97       	sbiw	r26, 0x06	; 6
 c1e:	ce 01       	movw	r24, r28
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	08 95       	ret

00000c2a <__ultoa_invert>:
 c2a:	fa 01       	movw	r30, r20
 c2c:	aa 27       	eor	r26, r26
 c2e:	28 30       	cpi	r18, 0x08	; 8
 c30:	51 f1       	breq	.+84     	; 0xc86 <__ultoa_invert+0x5c>
 c32:	20 31       	cpi	r18, 0x10	; 16
 c34:	81 f1       	breq	.+96     	; 0xc96 <__ultoa_invert+0x6c>
 c36:	e8 94       	clt
 c38:	6f 93       	push	r22
 c3a:	6e 7f       	andi	r22, 0xFE	; 254
 c3c:	6e 5f       	subi	r22, 0xFE	; 254
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	af 4f       	sbci	r26, 0xFF	; 255
 c46:	b1 e0       	ldi	r27, 0x01	; 1
 c48:	3e d0       	rcall	.+124    	; 0xcc6 <__ultoa_invert+0x9c>
 c4a:	b4 e0       	ldi	r27, 0x04	; 4
 c4c:	3c d0       	rcall	.+120    	; 0xcc6 <__ultoa_invert+0x9c>
 c4e:	67 0f       	add	r22, r23
 c50:	78 1f       	adc	r23, r24
 c52:	89 1f       	adc	r24, r25
 c54:	9a 1f       	adc	r25, r26
 c56:	a1 1d       	adc	r26, r1
 c58:	68 0f       	add	r22, r24
 c5a:	79 1f       	adc	r23, r25
 c5c:	8a 1f       	adc	r24, r26
 c5e:	91 1d       	adc	r25, r1
 c60:	a1 1d       	adc	r26, r1
 c62:	6a 0f       	add	r22, r26
 c64:	71 1d       	adc	r23, r1
 c66:	81 1d       	adc	r24, r1
 c68:	91 1d       	adc	r25, r1
 c6a:	a1 1d       	adc	r26, r1
 c6c:	20 d0       	rcall	.+64     	; 0xcae <__ultoa_invert+0x84>
 c6e:	09 f4       	brne	.+2      	; 0xc72 <__ultoa_invert+0x48>
 c70:	68 94       	set
 c72:	3f 91       	pop	r19
 c74:	2a e0       	ldi	r18, 0x0A	; 10
 c76:	26 9f       	mul	r18, r22
 c78:	11 24       	eor	r1, r1
 c7a:	30 19       	sub	r19, r0
 c7c:	30 5d       	subi	r19, 0xD0	; 208
 c7e:	31 93       	st	Z+, r19
 c80:	de f6       	brtc	.-74     	; 0xc38 <__ultoa_invert+0xe>
 c82:	cf 01       	movw	r24, r30
 c84:	08 95       	ret
 c86:	46 2f       	mov	r20, r22
 c88:	47 70       	andi	r20, 0x07	; 7
 c8a:	40 5d       	subi	r20, 0xD0	; 208
 c8c:	41 93       	st	Z+, r20
 c8e:	b3 e0       	ldi	r27, 0x03	; 3
 c90:	0f d0       	rcall	.+30     	; 0xcb0 <__ultoa_invert+0x86>
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0x5c>
 c94:	f6 cf       	rjmp	.-20     	; 0xc82 <__ultoa_invert+0x58>
 c96:	46 2f       	mov	r20, r22
 c98:	4f 70       	andi	r20, 0x0F	; 15
 c9a:	40 5d       	subi	r20, 0xD0	; 208
 c9c:	4a 33       	cpi	r20, 0x3A	; 58
 c9e:	18 f0       	brcs	.+6      	; 0xca6 <__ultoa_invert+0x7c>
 ca0:	49 5d       	subi	r20, 0xD9	; 217
 ca2:	31 fd       	sbrc	r19, 1
 ca4:	40 52       	subi	r20, 0x20	; 32
 ca6:	41 93       	st	Z+, r20
 ca8:	02 d0       	rcall	.+4      	; 0xcae <__ultoa_invert+0x84>
 caa:	a9 f7       	brne	.-22     	; 0xc96 <__ultoa_invert+0x6c>
 cac:	ea cf       	rjmp	.-44     	; 0xc82 <__ultoa_invert+0x58>
 cae:	b4 e0       	ldi	r27, 0x04	; 4
 cb0:	a6 95       	lsr	r26
 cb2:	97 95       	ror	r25
 cb4:	87 95       	ror	r24
 cb6:	77 95       	ror	r23
 cb8:	67 95       	ror	r22
 cba:	ba 95       	dec	r27
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__ultoa_invert+0x86>
 cbe:	00 97       	sbiw	r24, 0x00	; 0
 cc0:	61 05       	cpc	r22, r1
 cc2:	71 05       	cpc	r23, r1
 cc4:	08 95       	ret
 cc6:	9b 01       	movw	r18, r22
 cc8:	ac 01       	movw	r20, r24
 cca:	0a 2e       	mov	r0, r26
 ccc:	06 94       	lsr	r0
 cce:	57 95       	ror	r21
 cd0:	47 95       	ror	r20
 cd2:	37 95       	ror	r19
 cd4:	27 95       	ror	r18
 cd6:	ba 95       	dec	r27
 cd8:	c9 f7       	brne	.-14     	; 0xccc <__ultoa_invert+0xa2>
 cda:	62 0f       	add	r22, r18
 cdc:	73 1f       	adc	r23, r19
 cde:	84 1f       	adc	r24, r20
 ce0:	95 1f       	adc	r25, r21
 ce2:	a0 1d       	adc	r26, r0
 ce4:	08 95       	ret

00000ce6 <eeprom_read_byte>:
 ce6:	f9 99       	sbic	0x1f, 1	; 31
 ce8:	fe cf       	rjmp	.-4      	; 0xce6 <eeprom_read_byte>
 cea:	92 bd       	out	0x22, r25	; 34
 cec:	81 bd       	out	0x21, r24	; 33
 cee:	f8 9a       	sbi	0x1f, 0	; 31
 cf0:	99 27       	eor	r25, r25
 cf2:	80 b5       	in	r24, 0x20	; 32
 cf4:	08 95       	ret

00000cf6 <eeprom_write_byte>:
 cf6:	26 2f       	mov	r18, r22

00000cf8 <eeprom_write_r18>:
 cf8:	f9 99       	sbic	0x1f, 1	; 31
 cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <eeprom_write_r18>
 cfc:	1f ba       	out	0x1f, r1	; 31
 cfe:	92 bd       	out	0x22, r25	; 34
 d00:	81 bd       	out	0x21, r24	; 33
 d02:	20 bd       	out	0x20, r18	; 32
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	f8 94       	cli
 d08:	fa 9a       	sbi	0x1f, 2	; 31
 d0a:	f9 9a       	sbi	0x1f, 1	; 31
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	01 96       	adiw	r24, 0x01	; 1
 d10:	08 95       	ret

00000d12 <__prologue_saves__>:
 d12:	2f 92       	push	r2
 d14:	3f 92       	push	r3
 d16:	4f 92       	push	r4
 d18:	5f 92       	push	r5
 d1a:	6f 92       	push	r6
 d1c:	7f 92       	push	r7
 d1e:	8f 92       	push	r8
 d20:	9f 92       	push	r9
 d22:	af 92       	push	r10
 d24:	bf 92       	push	r11
 d26:	cf 92       	push	r12
 d28:	df 92       	push	r13
 d2a:	ef 92       	push	r14
 d2c:	ff 92       	push	r15
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	cd b7       	in	r28, 0x3d	; 61
 d38:	de b7       	in	r29, 0x3e	; 62
 d3a:	ca 1b       	sub	r28, r26
 d3c:	db 0b       	sbc	r29, r27
 d3e:	0f b6       	in	r0, 0x3f	; 63
 d40:	f8 94       	cli
 d42:	de bf       	out	0x3e, r29	; 62
 d44:	0f be       	out	0x3f, r0	; 63
 d46:	cd bf       	out	0x3d, r28	; 61
 d48:	09 94       	ijmp

00000d4a <__epilogue_restores__>:
 d4a:	2a 88       	ldd	r2, Y+18	; 0x12
 d4c:	39 88       	ldd	r3, Y+17	; 0x11
 d4e:	48 88       	ldd	r4, Y+16	; 0x10
 d50:	5f 84       	ldd	r5, Y+15	; 0x0f
 d52:	6e 84       	ldd	r6, Y+14	; 0x0e
 d54:	7d 84       	ldd	r7, Y+13	; 0x0d
 d56:	8c 84       	ldd	r8, Y+12	; 0x0c
 d58:	9b 84       	ldd	r9, Y+11	; 0x0b
 d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d5c:	b9 84       	ldd	r11, Y+9	; 0x09
 d5e:	c8 84       	ldd	r12, Y+8	; 0x08
 d60:	df 80       	ldd	r13, Y+7	; 0x07
 d62:	ee 80       	ldd	r14, Y+6	; 0x06
 d64:	fd 80       	ldd	r15, Y+5	; 0x05
 d66:	0c 81       	ldd	r16, Y+4	; 0x04
 d68:	1b 81       	ldd	r17, Y+3	; 0x03
 d6a:	aa 81       	ldd	r26, Y+2	; 0x02
 d6c:	b9 81       	ldd	r27, Y+1	; 0x01
 d6e:	ce 0f       	add	r28, r30
 d70:	d1 1d       	adc	r29, r1
 d72:	0f b6       	in	r0, 0x3f	; 63
 d74:	f8 94       	cli
 d76:	de bf       	out	0x3e, r29	; 62
 d78:	0f be       	out	0x3f, r0	; 63
 d7a:	cd bf       	out	0x3d, r28	; 61
 d7c:	ed 01       	movw	r28, r26
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
