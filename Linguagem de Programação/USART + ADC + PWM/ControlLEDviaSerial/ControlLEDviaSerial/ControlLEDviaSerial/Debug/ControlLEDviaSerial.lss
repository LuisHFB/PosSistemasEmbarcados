
ControlLEDviaSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800138  00800138  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1b  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d9  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000226d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  9e:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
char buffer[10] = {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0'};
int contabuffer = 0;
char recebido='?';

ISR(USART_RX_vect) //#Interrupt.h
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	
	recebido = USART_Receive();
  c8:	0e 94 2f 01 	call	0x25e	; 0x25e <USART_Receive>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	if(recebido == '[' && contabuffer == 0)
  d0:	8b 35       	cpi	r24, 0x5B	; 91
  d2:	79 f4       	brne	.+30     	; 0xf2 <__vector_18+0x4c>
  d4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
  d8:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
  dc:	23 2b       	or	r18, r19
  de:	49 f4       	brne	.+18     	; 0xf2 <__vector_18+0x4c>
	{
		buffer[0] = '[';
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		contabuffer++;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
  ec:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
  f0:	27 c0       	rjmp	.+78     	; 0x140 <__vector_18+0x9a>
	}
	
	else if(buffer[0] == '[' && contabuffer > 0 && recebido != '[')
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <buffer>
  f6:	9b 35       	cpi	r25, 0x5B	; 91
  f8:	19 f5       	brne	.+70     	; 0x140 <__vector_18+0x9a>
  fa:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
  fe:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
 102:	12 16       	cp	r1, r18
 104:	13 06       	cpc	r1, r19
 106:	e4 f4       	brge	.+56     	; 0x140 <__vector_18+0x9a>
 108:	8b 35       	cpi	r24, 0x5B	; 91
 10a:	a1 f0       	breq	.+40     	; 0x134 <__vector_18+0x8e>
	{
		buffer[contabuffer] = recebido;
 10c:	f9 01       	movw	r30, r18
 10e:	ef 5f       	subi	r30, 0xFF	; 255
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	80 83       	st	Z, r24
		contabuffer++;
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <__data_end+0x1>
 11c:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <__data_end>
 120:	0f c0       	rjmp	.+30     	; 0x140 <__vector_18+0x9a>
	}
	
	else if(buffer[0] == '[' && contabuffer > 0)
	{
		for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 122:	81 93       	st	Z+, r24
 124:	2e 17       	cp	r18, r30
 126:	3f 07       	cpc	r19, r31
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_18+0x7c>
		contabuffer=0;
 12a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
 12e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
	
	
	
	
		
}
 132:	06 c0       	rjmp	.+12     	; 0x140 <__vector_18+0x9a>
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	2b e0       	ldi	r18, 0x0B	; 11
 13a:	31 e0       	ldi	r19, 0x01	; 1
		contabuffer++;
	}
	
	else if(buffer[0] == '[' && contabuffer > 0)
	{
		for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	f1 cf       	rjmp	.-30     	; 0x122 <__vector_18+0x7c>
	
	
	
	
		
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <main>:

int main(void)
{
	USART_Init();
 162:	0e 94 1b 01 	call	0x236	; 0x236 <USART_Init>
	USART_StrTx("HELLO");
 166:	8b e0       	ldi	r24, 0x0B	; 11
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
	USART_Transmit('\r');
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit>
	USART_Transmit('\n');
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit>
	USART_rxIE();
 17a:	0e 94 46 01 	call	0x28c	; 0x28c <USART_rxIE>
    {
		sei();
		_delay_ms(1000);
		cli();
		
		if(buffer[0] == '[' && buffer[9] == ']')
 17e:	0f 2e       	mov	r0, r31
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	af 2e       	mov	r10, r31
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	bf 2e       	mov	r11, r31
 188:	f0 2d       	mov	r31, r0
 18a:	cb e0       	ldi	r28, 0x0B	; 11
 18c:	d1 e0       	ldi	r29, 0x01	; 1
		else if(buffer[0] == '[' && contabuffer > 0 && buffer[9] != ']')
		{
			USART_StrTx("Comando Invalido");
			USART_StrTx("\r\n");
			contabuffer = 0;
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }	
 18e:	10 e3       	ldi	r17, 0x30	; 48
	USART_Transmit('\n');
	USART_rxIE();
	
    while (1) 
    {
		sei();
 190:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	83 ed       	ldi	r24, 0xD3	; 211
 196:	90 e3       	ldi	r25, 0x30	; 48
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x36>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x40>
 1a2:	00 00       	nop
		_delay_ms(1000);
		cli();
 1a4:	f8 94       	cli
		
		if(buffer[0] == '[' && buffer[9] == ']')
 1a6:	f5 01       	movw	r30, r10
 1a8:	80 81       	ld	r24, Z
 1aa:	8b 35       	cpi	r24, 0x5B	; 91
 1ac:	d9 f5       	brne	.+118    	; 0x224 <main+0xc2>
 1ae:	81 85       	ldd	r24, Z+9	; 0x09
 1b0:	8d 35       	cpi	r24, 0x5D	; 93
 1b2:	f1 f4       	brne	.+60     	; 0x1f0 <main+0x8e>
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	ff 2e       	mov	r15, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	67 01       	movw	r12, r14
		{
			for(int i=0; i<=9 ;i++)
			{
				USART_Transmit(buffer[i]);
 1c2:	f6 01       	movw	r30, r12
 1c4:	81 91       	ld	r24, Z+
 1c6:	6f 01       	movw	r12, r30
 1c8:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit>
		_delay_ms(1000);
		cli();
		
		if(buffer[0] == '[' && buffer[9] == ']')
		{
			for(int i=0; i<=9 ;i++)
 1cc:	cc 15       	cp	r28, r12
 1ce:	dd 05       	cpc	r29, r13
 1d0:	c1 f7       	brne	.-16     	; 0x1c2 <main+0x60>
			{
				USART_Transmit(buffer[i]);
				
			}
			contabuffer = 0;
 1d2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
 1d6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }
 1da:	f7 01       	movw	r30, r14
 1dc:	11 93       	st	Z+, r17
 1de:	7f 01       	movw	r14, r30
 1e0:	ce 17       	cp	r28, r30
 1e2:	df 07       	cpc	r29, r31
 1e4:	d1 f7       	brne	.-12     	; 0x1da <main+0x78>
			USART_StrTx("\r\n");
 1e6:	81 e1       	ldi	r24, 0x11	; 17
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
 1ee:	d0 cf       	rjmp	.-96     	; 0x190 <main+0x2e>
		}
		
		else if(buffer[0] == '[' && contabuffer > 0 && buffer[9] != ']')
 1f0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 1f4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
 1f8:	18 16       	cp	r1, r24
 1fa:	19 06       	cpc	r1, r25
 1fc:	9c f4       	brge	.+38     	; 0x224 <main+0xc2>
		{
			USART_StrTx("Comando Invalido");
 1fe:	84 e1       	ldi	r24, 0x14	; 20
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
			USART_StrTx("\r\n");
 206:	81 e1       	ldi	r24, 0x11	; 17
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
			contabuffer = 0;
 20e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
 212:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
 216:	e1 e0       	ldi	r30, 0x01	; 1
 218:	f1 e0       	ldi	r31, 0x01	; 1
			for(int i=0;i<=9;i++) { buffer[i] = '0'; }	
 21a:	11 93       	st	Z+, r17
 21c:	ce 17       	cp	r28, r30
 21e:	df 07       	cpc	r29, r31
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xb8>
 222:	b6 cf       	rjmp	.-148    	; 0x190 <main+0x2e>
		}
		
		else
		{
			USART_StrTx("Aguadando Comando");
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
			USART_StrTx("\r\n");
 22c:	81 e1       	ldi	r24, 0x11	; 17
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 37 01 	call	0x26e	; 0x26e <USART_StrTx>
 234:	ad cf       	rjmp	.-166    	; 0x190 <main+0x2e>

00000236 <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t)(MYUBRR>>8);				// Ajuste da transmissão em 9600 bps
 236:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(MYUBRR);
 23a:	87 e6       	ldi	r24, 0x67	; 103
 23c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissão e recepção
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 24c:	08 95       	ret

0000024e <USART_Transmit>:
}
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	95 ff       	sbrs	r25, 5
 256:	fd cf       	rjmp	.-6      	; 0x252 <USART_Transmit+0x4>
	UDR0 = data;								// Envia o dado pela porta serial
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 25c:	08 95       	ret

0000025e <USART_Receive>:
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
	while(!(UCSR0A & (1<<RXC0)));				// Espera o dado ser recebido
 25e:	e0 ec       	ldi	r30, 0xC0	; 192
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	ec f7       	brge	.-6      	; 0x262 <USART_Receive+0x4>
	return UDR0;
 268:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 26c:	08 95       	ret

0000026e <USART_StrTx>:

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 274:	88 81       	ld	r24, Y
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <USART_StrTx+0x18>
 27a:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(*ptr);
 27c:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Transmit>
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fb cf       	rjmp	.-10     	; 0x27c <USART_StrTx+0xe>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 28c:	e1 ec       	ldi	r30, 0xC1	; 193
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 68       	ori	r24, 0x80	; 128
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
